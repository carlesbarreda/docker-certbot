name: Docker Image CI
on:
  schedule:
    - cron: '00 23 * * 0'

  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

  #pull_request:
  #  branches: [ "main" ]

  #pull_request:
  #  branches:
  #    - main
  #

  release:
      types: [published]

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: carlesbarreda/certbot
  exists: false
  BUILD: false
  COMMIT: false
  AUTHORS: docker@carlesbarreda.cat
  VENDOR: Carles Barreda

permissions:
  contents: write
  packages: write
  # This is used to complete the identity challenge
  # with sigstore/fulcio when running outside of PRs.
  id-token: write

jobs:
  pusher:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Last Docker Image Release
        run: |
          TAGS=$(curl -s https://hub.docker.com/v2/repositories/certbot/certbot/tags | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"latest"/ { print $2 }')
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | egrep -v 'latest|amd64' | cut -d'"' -f2)
          [ -f VERSION ] && VERSION=$(cat VERSION) || VERSION=""
          [ "$RELEASE" == "$VERSION" ] && exists='true' || exists='false'
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "exists=$exists" >> $GITHUB_ENV

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with: 
          tag: ${{ env.RELEASE }}

      - name: Check If Need Build
        run: |
          BUILD=${{ env.BUILD }}
          [[ '${{ env.exists }}' != 'true' && '${{ steps.checkTag.outputs.exists }}' != 'true' ]] && BUILD='true'
          [[ '${{ github.event_name }}' == 'push' ]] && BUILD='true'
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        if: env.BUILD == 'true'
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # https://github.com/docker/setup-buildx-action
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378273495
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378680855
      - name: Set up Docker Buildx
        if: env.BUILD == 'true'
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: v0.9.1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: env.BUILD == 'true' && github.event_name != 'pull_request'
        #uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          #username: ${{ github.actor }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-amd64
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            amd64-${{ env.RELEASE }}
            amd64-latest
          labels: |
            org.opencontainers.image.authors=${{ env.AUTHORS }}
            org.opencontainers.image.vendor=${{ env.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build amd64
        if: env.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.meta-amd64.outputs.tags }}
          labels: ${{ steps.meta-amd64.outputs.labels }}
          build-args: |
            TARGETARCH=amd64-${{ env.RELEASE }}
            BUILDTIME=${{ fromJSON(steps.meta-amd64.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-amd64.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta-amd64.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-arm64v8
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            arm64v8-${{ env.RELEASE }}
            arm64v8-latest
          labels: |
            org.opencontainers.image.authors=${{ env.AUTHORS }}
            org.opencontainers.image.vendor=${{ env.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build arm64v8
        if: env.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64/v8
          tags: ${{ steps.meta-arm64v8.outputs.tags }}
          labels: ${{ steps.meta-arm64v8.outputs.labels }}
          build-args: |
            TARGETARCH=arm64v8-${{ env.RELEASE }}
            BUILDTIME=${{ fromJSON(steps.meta-arm64v8.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-arm64v8.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta-arm64v8.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-arm32v6
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            arm32v6-${{ env.RELEASE }}
            arm32v6-latest
          labels: |
            org.opencontainers.image.authors=${{ env.AUTHORS }}
            org.opencontainers.image.vendor=${{ env.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build arm32v6
        if: env.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v6
          tags: ${{ steps.meta-arm32v6.outputs.tags }}
          labels: ${{ steps.meta-arm32v6.outputs.labels }}
          build-args: |
            TARGETARCH=arm32v6-${{ env.RELEASE }}
            BUILDTIME=${{ fromJSON(steps.meta-arm32v6.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-arm32v6.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta-arm32v6.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true

      - name: Update VERSION file
        if: env.exists != 'true'
        run: |
          echo "${{ env.RELEASE }}" > VERSION
          echo "COMMIT=true" >> $GITHUB_ENV

      - name: Commit Changes
        if: env.COMMIT == 'true'
        run: |
          git config --global user.name 'Carles Barreda'
          git config --global user.email '9409275+carlesbarreda@users.noreply.github.com'
          git add .
          git commit -am "Automated changes"
          git push

      - name: Create tag
        if: steps.checkTag.outputs.exists != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.RELEASE }}",
              sha: context.sha
            })

      #- name: Create and push manifest release images
      #  if: env.BUILD == 'true'
      #  uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
      #  with:
      #    inputs: carlesbarreda/certbot:${{ env.RELEASE }}
      #    images: carlesbarreda/certbot:amd64-${{ env.RELEASE }},carlesbarreda/certbot:arm64v8-${{ env.RELEASE }},carlesbarreda/certbot:arm32v6-${{ env.RELEASE }}
      #    amend: true
      #    push: true

      #- name: Create and push manifest latest images
      #  if: env.BUILD == 'true'
      #  uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
      #  with:
      #    inputs: carlesbarreda/certbot:latest
      #    images: carlesbarreda/certbot:amd64-latest,carlesbarreda/certbot:arm64v8-latest,carlesbarreda/certbot:arm32v6-latest
      #    amend: true
      #    push: true

      - name: Build the Docker image release manifest
        if: env.BUILD == 'true'
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          docker manifest create --amend \
            carlesbarreda/certbot:${{ env.RELEASE }} \
              carlesbarreda/certbot:amd64-${{ env.RELEASE }} \
              carlesbarreda/certbot:arm64v8-${{ env.RELEASE }} \
              carlesbarreda/certbot:arm32v6-${{ env.RELEASE }}
          docker manifest push carlesbarreda/certbot:${{ env.RELEASE }}

      - name: Build the Docker image latest manifest
        if: env.BUILD == 'true'
        #if: ${{ github.event.inputs.latest == 'yes' }}
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          docker manifest create --amend \
            carlesbarreda/certbot:latest \
              carlesbarreda/certbot:amd64-$RELEASE \
              carlesbarreda/certbot:arm64v8-$RELEASE \
              carlesbarreda/certbot:arm32v6-$RELEASE
          docker manifest push carlesbarreda/certbot:latest

      #- name: Remove TARGETARCH tag
      #  if: env.BUILD == 'true'
      #  run: |
      #    LOGIN=$(echo -e "{\n  \"username\": \"${{ secrets.DOCKER_USERNAME }}\",\n  \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"\n}\n")
      #    TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "$LOGIN" "https://hub.docker.com/v2/users/login/" | jq -r .token)
      #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/amd64-latest/" \
      #      -X DELETE \
      #      -H "Authorization: JWT ${TOKEN}"
      #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/arm64v8-latest/" \
      #      -X DELETE \
      #      -H "Authorization: JWT ${TOKEN}"
      #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/arm32v6-latest/" \
      #      -X DELETE \
      #      -H "Authorization: JWT ${TOKEN}"
