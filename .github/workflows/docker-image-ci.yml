name: Docker Image CI

on:
  #pull_request:
  #  branches:
  #    - main
  #
  workflow_dispatch:

env:
  IMAGE_NAME: carlesbarreda/certbot

permissions:
  contents: read
  packages: write
  # This is used to complete the identity challenge
  # with sigstore/fulcio when running outside of PRs.
  id-token: write

jobs:
  pusher:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Get Image Release
        run: |
          TAGS=$(curl -s https://hub.docker.com/v2/repositories/certbot/certbot/tags | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"latest"/ { print $2 }')
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | egrep -v 'latest|amd64' | cut -d'"' -f2)
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build amd64
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          build-args: |
            TARGETPLATFORM=linux/amd64
            TARGETARCH=amd64
          tags: |
            ${{ env.IMAGE_NAME }}:amd64-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:amd64-latest
          push: true

      - name: Build arm64v8
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64/v8
          build-args: |
            TARGETPLATFORM=linux/arm64/v8
            TARGETARCH=arm64v8
          tags: |
            ${{ env.IMAGE_NAME }}:arm64v8-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:arm64v8-latest
          push: true

      - name: Build arm32v6
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v6
          build-args: |
            TARGETPLATFORM=linux/arm/v6
            TARGETARCH=arm32v6
          tags: |
            ${{ env.IMAGE_NAME }}:arm32v6-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:arm32v6-latest
          push: true

      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.RELEASE }}",
              sha: context.sha
            })

      #- uses: actions/checkout@v3
      - name: Create VERSION file
        run: echo "${{ env.RELEASE }}" > VERSION
      - name: Commit VERSION
        run: |
          git config --global user.name 'Carles Barreda'
          git config --global user.email '9409275+carlesbarreda@users.noreply.github.com'
          git add VERSION
          git commit -am "Automated VERSION"
          git push

      #- name: Create and push manifest release images
      #  uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
      #  with:
      #    inputs: carlesbarreda/certbot:${{ env.RELEASE }}
      #    images: carlesbarreda/certbot:amd64-${{ env.RELEASE }},carlesbarreda/certbot:arm64v8-${{ env.RELEASE }},carlesbarreda/certbot:arm32v6-${{ env.RELEASE }}
      #    amend: true
      #    push: true

      #- name: Create and push manifest latest images
      #  uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
      #  with:
      #    inputs: carlesbarreda/certbot:latest
      #    images: carlesbarreda/certbot:amd64-latest,carlesbarreda/certbot:arm64v8-latest,carlesbarreda/certbot:arm32v6-latest
      #    amend: true
      #    push: true

      - name: Build the Docker image release manifest
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          docker manifest create --amend \
            carlesbarreda/certbot:${{ env.RELEASE }} \
              carlesbarreda/certbot:amd64-${{ env.RELEASE }} \
              carlesbarreda/certbot:arm64v8-${{ env.RELEASE }} \
              carlesbarreda/certbot:arm32v6-${{ env.RELEASE }}
          docker manifest push carlesbarreda/certbot:${{ env.RELEASE }}

      #- name: Build the Docker image latest manifest
      #  #if: ${{ github.event.inputs.latest == 'yes' }}
      #  env:
      #    DOCKER_CLI_EXPERIMENTAL: enabled
      #  run: |
      #    docker manifest create --amend \
      #      carlesbarreda/certbot:latest \
      #        carlesbarreda/certbot:amd64-$RELEASE \
      #        carlesbarreda/certbot:arm64v8-$RELEASE \
      #        carlesbarreda/certbot:arm32v6-$RELEASE
      #    docker manifest push carlesbarreda/certbot:latest

      #- name: Remove TARGETARCH tag
      #  run: |
      #    LOGIN=$(echo -e "{\n  \"username\": \"${{ secrets.DOCKER_USERNAME }}\",\n  \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"\n}\n")
      #    TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "$LOGIN" "https://hub.docker.com/v2/users/login/" | jq -r .token)
      #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/amd64-latest/" \
      #      -X DELETE \
      #      -H "Authorization: JWT ${TOKEN}"
      #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/arm64v8-latest/" \
      #      -X DELETE \
      #      -H "Authorization: JWT ${TOKEN}"
      #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/arm32v6-latest/" \
      #      -X DELETE \
      #      -H "Authorization: JWT ${TOKEN}"
