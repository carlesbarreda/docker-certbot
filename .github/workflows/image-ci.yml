name: Docker Image CI

on:
  #pull_request:
  #  branches:
  #    - main

  workflow_dispatch:

env:
  IMAGE_NAME: carlesbarreda/certbot

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.2.1
        with:
          dockerfile: Dockerfile

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.2.1
        with:
          dockerfile: Dockerfile

  build:
    name: Build and scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Get Image Release
        run: |
          TAGS=$(curl -s https://hub.docker.com/v2/repositories/certbot/certbot/tags | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"latest"/ { print $2 }')
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | egrep -v 'latest|amd64' | cut -d'"' -f2)
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Build amd64
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          build-args: |
            ARCH=amd64
          tags: |
            ${{ env.IMAGE_NAME }}:amd64-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:amd64-latest
          load: true

      - name: Build amd64
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          build-args: |
            ARCH=amd64
          tags: |
            ${{ env.IMAGE_NAME }}:amd64-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:amd64-latest
          load: true

      - name: Build arm64v8
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          build-args: |
            ARCH=arm64v8
          tags: |
            ${{ env.IMAGE_NAME }}:arm64v8-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:arm64v8-latest
          load: true

      - name: Build arm32v6
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v6
          build-args: |
            ARCH=arm32v6
          tags: |
            ${{ env.IMAGE_NAME }}:arm32v6-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:arm32v6-latest
          load: true

      - name: Run Trivy vulnerability scanner (amd64)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:amd64-${{ env.RELEASE }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner (arm64v8)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:arm64v8-${{ env.RELEASE }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner (arm32v6)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:arm32v6-${{ env.RELEASE }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      #- name: Build amd64
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    platforms: linux/amd64
      #    build-args: |
      #      ARCH=amd64
      #    tags: |
      #      ${{ env.IMAGE_NAME }}:amd64-${{ env.RELEASE }}
      #      ${{ env.IMAGE_NAME }}:amd64-latest
      #    push: true

      - name: Build arm64v8
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          build-args: |
            ARCH=arm64v8
          tags: |
            ${{ env.IMAGE_NAME }}:arm64v8-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:arm64v8-latest
          push: true

      - name: Build arm32v6
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v6
          build-args: |
            ARCH=arm32v6
          tags: |
            ${{ env.IMAGE_NAME }}:arm32v6-${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:arm32v6-latest
          push: true

      - name: Build the Docker image release manifest
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          docker manifest create \
            carlesbarreda/certbot:$RELEASE \
              --amend carlesbarreda/certbot:amd64-$RELEASE \
              --amend carlesbarreda/certbot:arm64v8-$RELEASE \
              --amend carlesbarreda/certbot:arm32v6-$RELEASE
          docker manifest push carlesbarreda/certbot:$RELEASE

      - name: Build the Docker image latest manifest
        #if: ${{ github.event.inputs.latest == 'yes' }}
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          docker manifest create \
            carlesbarreda/certbot:latest \
              --amend carlesbarreda/certbot:amd64-latest \
              --amend carlesbarreda/certbot:arm64v8-latest \
              --amend carlesbarreda/certbot:arm32v6-latest
          docker manifest push carlesbarreda/certbot:latest

    #- name: Remove arch tag
    #  run: |
    #    LOGIN=$(echo -e "{\n  \"username\": \"${{ secrets.DOCKER_USERNAME }}\",\n  \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"\n}\n")
    #    TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "$LOGIN" "https://hub.docker.com/v2/users/login/" | jq -r .token)
    #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/amd64-latest/" \
    #      -X DELETE \
    #      -H "Authorization: JWT ${TOKEN}"
    #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/arm64v8-latest/" \
    #      -X DELETE \
    #      -H "Authorization: JWT ${TOKEN}"
    #    curl "https://hub.docker.com/v2/repositories/carlesbarreda/certbot/tags/arm32v6-latest/" \
    #      -X DELETE \
    #      -H "Authorization: JWT ${TOKEN}"