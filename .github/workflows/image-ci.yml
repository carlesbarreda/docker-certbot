name: Docker Image CI

on:
  #pull_request:
  #  branches:
  #    - main

  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.2.1
        with:
          dockerfile: Dockerfile

      - name: Lint Dockerfile.buildx
        uses: brpaz/hadolint-action@v1.2.1
        with:
          dockerfile: Dockerfile.buildx

  build:
    name: Build and scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Image tag
        run: |
          echo carlesbarreda/${{ env.IMAGE_NAME }}:${{ github.sha }}
          TAGS=$(curl -s https://hub.docker.com/v2/repositories/certbot/certbot/tags | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"latest"/ { print $2 }')
          TAG_VERSION=$(echo $TAGS | jq . | grep $DIGEST | egrep -v 'latest|amd64' | cut -d'"' -f2)
          echo $TAG_VERSION

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: |
            carlesbarreda/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'carlesbarreda/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'



#TAGS=$(curl -s https://hub.docker.com/v2/repositories/certbot/certbot/tags | jq '.results[] | {(.name): .images[].digest}')
#DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"latest"/ { print $2 }')
#TAG_VERSION=$(echo $TAGS | jq . | grep $DIGEST | egrep -v 'latest|amd64' | cut -d'"' -f2)
#echo $TAG_VERSION
